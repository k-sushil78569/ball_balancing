import cv2
import numpy as np
import math
import time
import RPi.GPIO as GPIO
from picamera2 import Picamera2

# === PID Controller Class ===
class PID:
    def __init__(self, K_PID, k, alpha):
        self.kp, self.ki, self.kd = K_PID
        self.k = k
        self.alpha = alpha
        self.last_output_x = self.last_output_y = 0
        self.last_error_x = self.last_error_y = 0
        self.integral_x = self.integral_y = 0
        self.last_time = None

    def compute(self, Goal, Current_value):
        current_time = time.perf_counter()
        if self.last_time is None:
            self.last_time = current_time
            return 0, 0

        dt = current_time - self.last_time
        error_x = Goal[0] - Current_value[0]
        error_y = Goal[1] - Current_value[1]
        self.integral_x += error_x * dt
        self.integral_y += error_y * dt
        derivative_x = (error_x - self.last_error_x) / dt
        derivative_y = (error_y - self.last_error_y) / dt

        output_x = self.kp * error_x + self.ki * self.integral_x + self.kd * derivative_x
        output_y = self.kp * error_y + self.ki * self.integral_y + self.kd * derivative_y

        output_x = self.alpha * output_x + (1 - self.alpha) * self.last_output_x
        output_y = self.alpha * output_y + (1 - self.alpha) * self.last_output_y

        theta = math.degrees(math.atan2(output_y, output_x))
        if theta < 0:
            theta += 360

        phi = self.k * math.sqrt(output_x ** 2 + output_y ** 2)

        self.last_error_x, self.last_error_y = error_x, error_y
        self.last_output_x, self.last_output_y = output_x, output_y
        self.last_time = current_time

        return theta, phi

# === Inverse Kinematics Class ===
class AngleVal:
    def __init__(self, theta, phi, ch):
        self.theta = math.radians(theta)
        self.phi = phi
        self.ch = ch
        self.r = 0.05
        self.L1 = 0.04
        self.L2 = 0.06
        self.X = 0.02

    def calculateH(self):
        sin_phi = math.sin(math.radians(self.phi))
        t = self.theta
        self.ah1 = self.ch + self.r * math.sin(t) * sin_phi
        self.ah2 = self.ch + self.r * math.cos(t + math.radians(30)) * sin_phi
        self.ah3 = self.ch - self.r * math.cos(t - math.radians(30)) * sin_phi

    def calculateAlpha(self, y):
        try:
            part1 = math.atan2(y, self.X)
            d = math.sqrt(self.X ** 2 + y ** 2)
            part2 = math.acos((self.X ** 2 + y ** 2 + self.L1 ** 2 - self.L2 ** 2) / (2 * self.L1 * d))
            alpha = part1 - part2
            return math.degrees(alpha)
        except ValueError:
            return float('nan')

    def output(self):
        self.calculateH()
        A1 = self.calculateAlpha(self.ah1)
        A2 = self.calculateAlpha(self.ah2)
        A3 = self.calculateAlpha(self.ah3)
        return A1, A2, A3

# === Servo PWM Setup ===
GPIO.setmode(GPIO.BCM)
servo_pins = [18, 23, 24]
pwms = []

for pin in servo_pins:
    GPIO.setup(pin, GPIO.OUT)
    pwm = GPIO.PWM(pin, 50)  # 50Hz
    pwm.start(0)
    pwms.append(pwm)

def set_servo_angles(angles):
    for i in range(3):
        angle = angles[i] + 110  # changed from +90 to +110
        angle = max(0, min(angle, 180))  # Clamp to safe servo range
        duty = 2.5 + (angle / 180.0) * 10
        pwms[i].ChangeDutyCycle(duty)
    time.sleep(0.1)

# === Constants and PID Settings ===
GOAL = (0, 0)
pid = PID(K_PID=(0.2, 0.05, 0.1), k=1.5, alpha=0.7)
ch = 0.04  # equilibrium height

# === HSV range for orange ball ===
lower_orange = np.array([4, 140, 150])
upper_orange = np.array([25, 255, 255])

# === Camera Setup ===
picam2 = Picamera2()
picam2.configure(picam2.create_preview_configuration(main={"size": picam2.sensor_resolution}))
picam2.start()

# === Main Loop ===
try:
    while True:
        frame = picam2.capture_array()
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)

        # Rotate if needed
        angle_deg = 18
        (h, w) = frame.shape[:2]
        center = (w // 2, h // 2)
        M = cv2.getRotationMatrix2D(center, angle_deg, 1.0)
        cos = np.abs(M[0, 0])
        sin = np.abs(M[0, 1])
        new_w = int(h * sin + w * cos)
        new_h = int(h * cos + w * sin)
        M[0, 2] += (new_w / 2) - center[0]
        M[1, 2] += (new_h / 2) - center[1]
        frame = cv2.warpAffine(frame, M, (new_w, new_h))

        # Preprocessing
        display_frame = cv2.resize(frame, (800, 600))
        blurred = cv2.GaussianBlur(display_frame, (5, 5), 0)
        hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(hsv, lower_orange, upper_orange)
        kernel = np.ones((5, 5), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

        # Axis origin
        h_disp, w_disp = display_frame.shape[:2]
        origin_x = w_disp // 2
        origin_y = h_disp // 2

        # Ball detection
        contours, _ = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        if contours:
            c = max(contours, key=cv2.contourArea)
            ((x, y), radius) = cv2.minEnclosingCircle(c)
            area = cv2.contourArea(c)
            if radius > 10 and area > 100:
                x_coord = int(x - origin_x)
                y_coord = int(origin_y - y)

                # === Compute θ and φ ===
                theta, phi = pid.compute(GOAL, (x_coord, y_coord))

                # === Compute Servo Angles ===
                angle_obj = AngleVal(theta, phi, ch)
                A1, A2, A3 = angle_obj.output()

                # === Set Servo PWM Signals ===
                set_servo_angles([A1, A2, A3])
            else:
                set_servo_angles([80, 80, 80])  # No ball condition
        else:
            set_servo_angles([80, 80, 80])  # No ball condition

        # Optional: show display if debugging
        # cv2.imshow("Ball Tracking", display_frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("Interrupted.")

finally:
    print("Cleaning up...")
    for pwm in pwms:
        pwm.stop()
    GPIO.cleanup()
    cv2.destroyAllWindows()
    picam2.stop()
