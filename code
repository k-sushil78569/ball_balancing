import cv2
import numpy as np

# HSV range for orange TT ball (adjust as needed)
lower_orange = np.array([4, 140, 150])
upper_orange = np.array([25, 255, 255])

# Initialize webcam
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Resize frame (optional for speed)
    frame = cv2.resize(frame, (500, 500))

    # Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(frame, (5, 5), 0)

    # Convert BGR to HSV
    hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)

    # Create mask for the orange color
    mask = cv2.inRange(hsv, lower_orange, upper_orange)

    # Define kernel for morphology
    kernel = np.ones((5, 5), np.uint8)

    # Clean mask: remove noise (opening) and fill gaps (closing)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

    # Find contours
    contours, _ = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    if contours:
        # Find largest contour
        c = max(contours, key=cv2.contourArea)
        ((x, y), radius) = cv2.minEnclosingCircle(c)
        area = cv2.contourArea(c)

        # Filter out small detections
        if radius > 10 and area > 100:
            # Draw enclosing circle
            cv2.circle(frame, (int(x), int(y)), int(radius), (0, 255, 0), 2)
            cv2.circle(frame, (int(x), int(y)), 5, (0, 0, 255), -1)

            # Show coordinates
            cv2.putText(frame, f"X: {int(x)}, Y: {int(y)}", (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2)

    # Display frames
    cv2.imshow("Ball Tracking", frame)
    cv2.imshow("Mask", mask)

    # Exit on 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Cleanup
cap.release()
cv2.destroyAllWindows()
