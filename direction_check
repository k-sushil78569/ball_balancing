import RPi.GPIO as GPIO
import time

# --- GPIO Pin Setup ---
GPIO.setmode(GPIO.BCM)
servo_pins = [18, 23, 24]  # arm1, arm2, arm3

# Equilibrium positions (calibrated)
equilibrium_angles = [100, 100, 105]  # degrees

# Tilt offset (can increase if needed)
tilt = 10  # degrees

# 8 tilt directions with servo angle offsets (Δ)
direction_offsets = {
    "North":         [ 0, -tilt,  tilt],
    "North-East":    [-tilt, -tilt, tilt],
    "East":          [-tilt,  0, tilt],
    "South-East":    [-tilt, tilt,  tilt],
    "South":         [ 0,  tilt, -tilt],
    "South-West":    [ tilt, tilt, -tilt],
    "West":          [ tilt,  0, -tilt],
    "North-West":    [ tilt, -tilt, -tilt],
}

# --- Initialize PWM at 50Hz for each servo ---
pwms = []
for pin in servo_pins:
    GPIO.setup(pin, GPIO.OUT)
    pwm = GPIO.PWM(pin, 50)  # 50Hz for servo
    pwm.start(0)             # Start with 0% duty cycle
    pwms.append(pwm)

# --- Function to Set Angle ---
def set_servo_angle(pwm, angle):
    duty = 2.5 + (angle / 180.0) * 10  # Convert angle to duty cycle
    pwm.ChangeDutyCycle(duty)
    time.sleep(0.5)  # Allow servo to reach position (adjust if needed)
    # Do NOT stop PWM (we want servo to hold position)

# --- Move All Servos to Target Angles ---
def move_platform(target_angles):
    for i in range(3):
        set_servo_angle(pwms[i], target_angles[i])

# --- Run the Tilt Test Sequence ---
def try_platform_slope():
    print("Moving to equilibrium...")
    move_platform(equilibrium_angles)
    time.sleep(1)

    for direction, offsets in direction_offsets.items():
        target_angles = [
            equilibrium_angles[i] + offsets[i] for i in range(3)
        ]
        print(f"Tilt → {direction}: {target_angles}")
        move_platform(target_angles)
        time.sleep(5)  # Stay in this tilt for 5 seconds
        print("Returning to equilibrium...")
        move_platform(equilibrium_angles)
        time.sleep(1)

# --- Main ---
try:
    print("Starting platform tilt test...")
    try_platform_slope()
    print("Test completed.")

except KeyboardInterrupt:
    print("Interrupted by user.")

finally:
    print("Cleaning up...")
    for pwm in pwms:
        pwm.stop()  # Stop PWM safely on exit
    GPIO.cleanup()
